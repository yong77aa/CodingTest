################# 수 자료형
* 지수 표현 방식
    - 1e9: 10의 9제곱
    - INF: 무한

* 실수형
    - round(): 반올림

* 연산자
    - /: 나눠진 결과 실수형 반환
    - %: 나머지 연산자
    - //: 몫 연산자
    - **: 거듭 제곱 연산자

################# 리스트
* 파이썬 언더바(_)
    - 반복 수행하되 반복을 위한 변수 값 무시

* 리스트 인덱싱과 슬라이싱
    - a[-1]: 뒤쪽 첫번째 원소
    - a[1:4]: 두번째부터 네번째 원소까지

* 리스트 컴프리헨션
    - [i for i in range(10)]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    - [i for i in range(20) if i % 2 == 1]: 0부터 19까지 중 홀수만 포함
    - [i * i for i in range(1, 10)]: 1부터 9까지의 제곱수
    - [[0] * m for _ in range(n)]: n x m 크기 2차원 리스트

* 리스트 관련 메서드
    - append(): 원소 삽입
    - sort(): 오름차순 정렬
    - sort(reverse = True): 내림차순 정렬
    - reverse(): 원소 거꾸로
    - insert(): 특정 인덱스 삽입
    - count(): 특정 값 데이터 개수
    - remove(): 특정 값 데이터 제거, 여러개인 경우 하나만

* 리스트 특정 값 원소 모두 제거
    - a = [1, 2, 3, 4, 5, 5, 5]
    - remove_set = {3, 5}: 집합 자료형
    - result = [i for i in a if i not in remove_set]

################# 튜플 자료형
* 튜플
    - 한 번 선언된 값 변경 불가, 공간 효율적
    - 소괄호 () 사용: a = (1, 2, 3, 4, 5)
    - 원소 접근은 리스트와 같음: a[3] = 4

* 튜플을 사용하면 좋은 경우
    - 서로 다른 성질의 데이터: ex) 최단 경로 알고리즘 (비용, 노드 번호)
    - 데이터의 나열을 해싱의 키 값으로 사용
    - 메모리 관리

################# 딕셔너리(사전) 자료형
* 딕셔너리
    - 키, 값의 쌍을 데이터로 가짐
    - 변경 불가능한 자료형을 키로 사용 가능, 키 값으로 접근함
    - data = dict()
    - data['사과'] = 'Apple'
    - data = {
                '사과': 'Apple',
             }
    - if '사과' in data:
        print("사과를 키로 가지는 데이터 존재")
    - 키 데이터만: keys(), data.keys()
    - 값 데이터만: values(), kdata.values()
    - 각 키에 따른 값 출력
    - for key in key_list:
        print(data[key])

################# 집합(set) 자료형
* 집합 자료형 set
    - 초기화 방법: set([1, 2, 3, 4, 5]), {1, 2, 3, 4, 5}
    - 중복을 허용하지 않음
    - 순서가 없음
    - 합집합: a|b, 교집합: a&b, 차집합: a-b
    - add(한개 추가), update([여러개, 추가]), remove(제거)

################# 조건문과 반복문
* 조건문
    - X and Y: X와 Y가 둘 다 참일때 참
    - X or Y: X와 Y 둘 중 하나만 참이여도 참
    - not X: X가 거짓일 때, 참
    - x in 리스트: 리스트 안에 x가 포함되면 참
    - x not in 문자열: 문자열 안에 x가 없으면 참
    - pass: 아무 처리도 하지 않을 때

* 반복분
    - 남은 코드의 실행을 건너띌 때: continue

################# 함수
* 함수
    - 단순 전역변수 값 참조시에는 global 키워드 필요없음
    - 전역변수로 선언된 리스트 객체의 내부 메서드도 키워드 필요없이 사용 가능
    - 전역변수와 같은 이름의 함수안 지역변수가 있다면, 함수안 지역변수 우선
    - 코딩테스트에서는 리스트는 단순히 전역변수로 사용하는 경우가 많아서 scope 설정은 주로 고려하지 않아도 됨

################# 람다표현식
* 람다표현식(이름없는 함수)
    - print((lambda a, b: a + b)(3, 7))
    - print(sorted(array, key=lambda x: x[1])): 두번째 원소순으로 오름차순 정렬
    - result = map(lambda a, b: a + b, list1, list2)

################# 표준 라이브러리
* 추천 표준 라이브러리
    - itertools: 반복되는 형태 데이터 처리 (순열과 조합 등)
    - heapq: heap 자료구조 (우선순위 큐 등)
    - bisect: 이진 탐색
    - collections: 덱(deque), 카운터(Counter)
    - math: 팩토리얼, 제곱근, 최대공약수, 삼각함수, 파이 등

################# 순열과 조합
* 순열과 조합
    - 순열: 서로 다른 n개에서 서로 다른 r개를 선택해 일렬로 나열
        -> from itertools import permutations
        -> data = ['A', 'B', 'C']
        -> result = list(permutations(data, 3)): data에서 3개 뽑아서 순열 구하기
        -> [('A','B','C'), ('A','C','B'), ('B','A','C') ...]
    - 조합: 서로 다른 n개에서 순서에 상관 없이 서로 다른 r개 선택
        -> from itertools import combinations
        -> data = ['A', 'B', 'C']
        -> result = list(combinations(data, 2)): data에서 2개를 뽑는 모든 조합
        -> [('A','B'), ('A','C'), ('B','C')]

* 중복 순열과 중복 조합
    - 중복 순열
        -> from itertools import product
        -> result = list(product(data, repeat=2)): 2개를 뽑는 중복 허용 모든 순열
    - 중복 조합
        -> from itertools import combinations_with_replacement
        -> result = list(combinations_with_replacement(data, 2)): 2개를 뽑는 모든 조합

################# Counter
* Counter
    - 리스트와 같은 반복 가능한 객체가 주어졌을 때 내부 원소의 등장 횟수
        -> from collections import Counter
        -> counter = Counter['red', 'blue', 'red', 'blue', 'blue']
        -> print(counter['blue']): blue가 등장한 횟수 출력

################# Math
* 최대공약수, 최소공배수
    - import math
    - 최대공약수: math.gcd(a, b)
    - 최소공배수
        -> def lcm(a, b):
            return a * b // math.gcd(a, b)
