* 다이나믹 프로그래밍(동적 계획법)
    - 메모리를 적절히 사용하여 수행 시간 효율성을 비약적으로 향상
    - 이미 계산된 결과는 별도의 메모리 영역에 저장
    - 일반적으로 두 가지 방식(탑다운, 보텀업)
    - 여기서 동적 계획이란 일반적인 메모리 할당하는 '동적'과는 다른 의미임
    - 해당 유형의 사용 조건
        1. 최적 부분 구조
            -> 큰 문제를 작은 문제로 나눌 수 있으며, 작은 문제의 답을 모아 큰 문제 해결
        2. 중복되는 부분 문제
            -> 동일한 작은 문제를 반복적으로 해결

* 메모이제이션(탑다운)
    - 한 번 계산한 결과를 메모리 공간에 메모
    - 같은 문제를 다시 호출하면 메모했던 결과를 그대로 가져옴(캐싱)
    - 재귀 호출을 사용해서 풀이

* 보텀업
    - 작은 것부터 차례차례 계산해 나가는 것
    - 반복문을 사용해서 풀이

* 다이나믹 프로그래밍과 분할 정복
    - 다이나믹 프로그래밍: 동일한 부분 문제가 중복
    - 분할 정복: 동일한 부분 문제가 반복적으로 계산되지 않음(ex. 퀵정렬)

* 접근 방식
    - 그리디, 구현, 완전 탐색 등의 아이디어로 해결할 수 있는지 확인
    - 다른 아이디어로 해결되지 않으면 다이나믹 프로그래밍 사용
    - 일단 재귀 함수로 완전 탐색 프로그램을 작성한 뒤에, 메모이제이션을 추가하는 방식으로 코드 개선선