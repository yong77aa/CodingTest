* 지수 표현 방식
    - 1e9: 10의 9제곱
    - INF: 무한

* 실수형
    - round(): 반올림

* 연산자
    - /: 나눠진 결과 실수형 반환
    - %: 나머지 연산자
    - //: 몫 연산자
    - **: 거듭 제곱 연산자

* 파이썬 언더바(_)
    - 반복 수행하되 반복을 위한 변수 값 무시

* 리스트 인덱싱과 슬라이싱
    - a[-1]: 뒤쪽 첫번째 원소
    - a[1:4]: 두번째부터 네번째 원소까지

* 리스트 컴프리헨션
    - [i for i in range(10)]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    - [i for i in range(20) if i % 2 == 1]: 0부터 19까지 중 홀수만 포함
    - [i * i for i in range(1, 10)]: 1부터 9까지의 제곱수
    - [[0] * m for _ in range(n)]: n x m 크기 2차원 리스트

* 리스트 관련 메서드
    - append(): 원소 삽입
    - sort(): 오름차순 정렬
    - sort(reverse = True): 내림차순 정렬
    - reverse(): 원소 거꾸로
    - insert(): 특정 인덱스 삽입
    - count(): 특정 값 데이터 개수
    - remove(): 특정 값 데이터 제거, 여러개인 경우 하나만

* 리스트 특정 값 원소 모두 제거
    - a = [1, 2, 3, 4, 5, 5, 5]
    - remove_set = {3, 5}: 집합 자료형
    - result = [i for i in a if i not in remove_set]

* 튜플
    - 한 번 선언된 값 변경 불가, 공간 효율적
    - 소괄호 () 사용: a = (1, 2, 3, 4, 5)
    - 원소 접근은 리스트와 같음: a[3] = 4

* 튜플을 사용하면 좋은 경우
    - 서로 다른 성질의 데이터: ex) 최단 경로 알고리즘 (비용, 노드 번호)
    - 데이터의 나열을 해싱의 키 값으로 사용
    - 메모리 관리

* 딕셔너리
    - 키, 값의 쌍을 데이터로 가짐
    - 변경 불가능한 자료형을 키로 사용 가능, 키 값으로 접근함
    - data = dict()
    - data['사과'] = 'Apple'
    - data = {
                '사과': 'Apple',
             }
    - if '사과' in data:
        print("사과를 키로 가지는 데이터 존재")
    - 키 데이터만: keys(), data.keys()
    - 값 데이터만: values(), kdata.values()
    - 각 키에 따른 값 출력
    - for key in key_list:
        print(data[key])
